# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  gcp-cli: circleci/gcp-cli@2.4.0
  secops: apollo/circleci-secops-orb@2.0.0

executors:
  node:
    docker:
      - image: circleci/node:14.17.0-browsers
    working_directory: ~/embeddable-explorer

commands:
  setup-sandbox-gcs-creds:
    steps:
      - checkout
      - run:
          name: Setup GCloud Creds
          command: |
            echo "$GCLOUD_SERVICE_KEY_SANDBOX" | base64 --ignore-garbage -d > /tmp/google-service-account-key-sandbox.json
            [ ! -z "$GCLOUD_SERVICE_KEY_SANDBOX" ] && gcloud auth activate-service-account --key-file=/tmp/google-service-account-key-sandbox.json || exit 0
      - restore_cache:
          keys:
            - v0-dependencies-
  setup-explorer-gcs-creds:
    steps:
      - checkout
      - run:
          name: Setup GCloud Creds
          command: |
            echo "$GCLOUD_SERVICE_KEY_EXPLORER" | base64 --ignore-garbage -d > /tmp/google-service-account-key-explorer.json
            [ ! -z "$GCLOUD_SERVICE_KEY_EXPLORER" ] && gcloud auth activate-service-account --key-file=/tmp/google-service-account-key-explorer.json || exit 0;
      - restore_cache:
          keys:
            - v0-dependencies-
  npm-install:
    steps:
      - run:
          name: Installs npm version from package.jsons engines field
          command: |
            VOLTA_NPM_VERSION=`node -e "console.log(require('./package.json').volta.npm)"`;
            sudo npm i -g npm@$VOLTA_NPM_VERSION;
            npm -v;

      - restore_cache:
          name: Restore npm cache
          keys:
            - npm-cache--{{ checksum "package-lock.json" }}--{{ checksum ".circleci/config.yml" }}
      - run:
          name: Install npm dependencies with `npm ci`
          command: npm ci --prefer-offline
      - save_cache:
          name: Save npm caches
          key: npm-cache--{{ checksum "package-lock.json" }}--{{ checksum ".circleci/config.yml" }}
          paths:
            - ~/.npm

  set-explorer-npm-env-vars:
    steps:
      - checkout
      - npm-install
      - run:
          name: Set NPM Env Vars
          command: |
            touch bash.env
            NPM_EXPLORER_VERSION=`node -e "console.log(require('./packages/explorer/package.json').version)"`;
            NPM_MAJOR_EXPLORER_VERSION="$(echo $NPM_EXPLORER_VERSION | cut -d'.' -f1)";
            echo "NPM_MAJOR_EXPLORER_VERSION=$(echo $NPM_MAJOR_EXPLORER_VERSION)" >> bash.env

      - run: |
          cat bash.env
      - run: |
          # verify; optional step
          printenv
      - persist_to_workspace:
          root: ~/embeddable-explorer
          paths:
            - bash.env


  set-sandbox-npm-env-vars:
    steps:
      - checkout
      - npm-install
      - run:
          name: Set NPM Env Vars
          command: |
            touch bash.env
            NPM_SANDBOX_VERSION=`node -e "console.log(require('./packages/sandbox/package.json').version)"`;
            NPM_MAJOR_SANDBOX_VERSION="$(echo $NPM_SANDBOX_VERSION | cut -d'.' -f1)";
            echo "NPM_MAJOR_SANDBOX_VERSION=$(echo $NPM_MAJOR_SANDBOX_VERSION)" >> bash.env

      - run: |
          cat bash.env
      - run: |
          # verify; optional step
          printenv
      - persist_to_workspace:
          root: ~/embeddable-explorer
          paths:
            - bash.env

jobs:
  set-env-vars:
    executor: node
    steps:
      - set-explorer-npm-env-vars
      - set-sandbox-npm-env-vars
      - persist_to_workspace:
          root: ~/embeddable-explorer
          paths:
            - bash.env
  bundlewatch:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: ~/embeddable-explorer
      - run:
          name: Report bundle size
          command: npx bundlewatch
          environment:
            CI_BRANCH_BASE: main
  eslint:
    executor: node
    steps:
      - checkout
      - npm-install
      - run:
          name: Ensure output directory exists
          command: mkdir -p /tmp/test-reports/eslint
      - restore_cache:
          name: Restore eslint cache
          keys:
            - raw-eslint-cache--{{ checksum ".eslintrc.js" }}--{{ .Branch }}--{{ checksum ".circleci/config.yml" }}
            - raw-eslint-cache--{{ checksum ".eslintrc.js" }}--main--{{ checksum ".circleci/config.yml" }}
      - run:
          name: Linter
          command: npm run lint -- --quiet --format junit --output-file /tmp/test-reports/eslint/results.xml
      - save_cache:
          name: Save eslint cache
          key: raw-eslint-cache--{{ checksum ".eslintrc.js" }}--{{ .Branch }}--{{ checksum ".circleci/config.yml" }}--{{ epoch }}
          paths:
            - .eslintcache
      - store_test_results:
          path: /tmp/test-reports
  prettier:
    executor: node
    steps:
      - checkout
      - npm-install
      - run: 
          name: Prettier
          command: npm run prettier:check

  typescript:
    executor: node
    steps:
      - checkout
      - npm-install
      - run:
          name: TypeScript
          command: npm run build

  build-latest-umd-explorer:
    executor: node
    steps:
      - checkout
      - npm-install
      - run:
          name: Build
          command: '[ -d build ] || cd packages/explorer && PUBLIC_URL=https://embeddable-explorer.cdn.apollographql.com/latest npm run build:umd -- --no-progress'
      - persist_to_workspace:
          root: ~/embeddable-explorer
          paths:
            - packages/explorer/dist

  build-github-versioned-umd-explorer:
    executor: node
    steps:
      - checkout
      - npm-install
      - run:
          name: Build
          command: '[ -d build ] || cd packages/explorer && PUBLIC_URL=https://embeddable-explorer.cdn.apollographql.com/$CIRCLE_SHA1 npm run build:umd -- --no-progress'
      - persist_to_workspace:
          root: ~/embeddable-explorer
          paths:
            - packages/explorer/dist

  build-npm-versioned-umd-explorer:
    executor: node
    steps:
      - checkout
      - npm-install
      - attach_workspace:
          at: ~/embeddable-explorer
      - run: |
          cat bash.env
          cat bash.env >> $BASH_ENV
      - run:
          name: Build
          command: |
            [ -d build ] || cd packages/explorer && PUBLIC_URL=https://embeddable-explorer.cdn.apollographql.com/v$NPM_MAJOR_EXPLORER_VERSION npm run build:umd -- --no-progress
      - persist_to_workspace:
          root: ~/embeddable-explorer
          paths:
            - packages/explorer/dist

  cdn-upload-latest-explorer:
    executor: gcp-cli/google
    steps:
      - setup-explorer-gcs-creds
      - gcp-cli/install
      - checkout
      - attach_workspace:
          at: ~/embeddable-explorer
      - run:
          name: Copy public folder to dist
          command: |
            cp -R public ~/embeddable-explorer/packages/explorer/dist/public
      - run:
          name: Upload build artifacts to CDN
          command: |
            gsutil -m rsync -r ~/embeddable-explorer/packages/explorer/dist gs://embeddable-explorer/latest

  cdn-upload-github-versioned-explorer:
    executor: gcp-cli/google
    steps:
      - setup-explorer-gcs-creds
      - gcp-cli/install
      - checkout
      - attach_workspace:
          at: ~/embeddable-explorer
      - run:
          name: Upload build artifacts to CDN
          command: |
            gsutil -m rsync -r ~/embeddable-explorer/packages/explorer/dist gs://embeddable-explorer/$CIRCLE_SHA1

  cdn-upload-npm-versioned-explorer:
    executor: node
    steps:
      - gcp-cli/install
      - checkout
      - attach_workspace:
          at: ~/embeddable-explorer
      - run: |
          cat bash.env
          cat bash.env >> $BASH_ENV
      - setup-explorer-gcs-creds
      - run:
          name: Upload build artifacts to CDN
          command: |
            gsutil -m rsync -r ~/embeddable-explorer/packages/explorer/dist gs://embeddable-explorer/v$NPM_MAJOR_EXPLORER_VERSION

  build-latest-umd-sandbox:
    executor: node
    steps:
      - checkout
      - npm-install
      - run:
          name: Build
          command: '([ -d build ] || cd packages/sandbox && PUBLIC_URL=https://embeddable-sandbox.cdn.apollographql.com/latest npm run build:umd -- --no-progress)'
      - persist_to_workspace:
          root: ~/embeddable-explorer
          paths:
            - packages/sandbox/dist

  build-github-versioned-umd-sandbox:
    executor: node
    steps:
      - checkout
      - npm-install
      - run:
          name: Build
          command: '[ -d build ] || cd packages/sandbox && PUBLIC_URL=https://embeddable-sandbox.cdn.apollographql.com/$CIRCLE_SHA1 npm run build:umd -- --no-progress'
      - persist_to_workspace:
          root: ~/embeddable-explorer
          paths:
            - packages/sandbox/dist

  build-npm-versioned-umd-sandbox:
    executor: node
    steps:
      - checkout
      - npm-install
      - attach_workspace:
          at: ~/embeddable-explorer
      - run: |
          cat bash.env
          cat bash.env >> $BASH_ENV
      - run:
          name: Build
          command: |
            [ -d build ] || cd packages/sandbox && PUBLIC_URL=https://embeddable-sandbox.cdn.apollographql.com/v$NPM_MAJOR_SANDBOX_VERSION npm run build:umd -- --no-progress
      - persist_to_workspace:
          root: ~/embeddable-explorer
          paths:
            - packages/sandbox/dist

  cdn-upload-latest-sandbox:
    executor: gcp-cli/google
    steps:
      - setup-sandbox-gcs-creds
      - gcp-cli/install
      - checkout
      - attach_workspace:
          at: ~/embeddable-explorer
      - run:
          name: Copy public folder to dist
          command: |
            cp -R public ~/embeddable-explorer/packages/sandbox/dist/public
      - run:
          name: Upload build artifacts to CDN
          command: |
            gsutil -m rsync -r ~/embeddable-explorer/packages/sandbox/dist gs://embeddable-sandbox/latest

  cdn-upload-github-versioned-sandbox:
    executor: gcp-cli/google
    steps:
      - setup-sandbox-gcs-creds
      - gcp-cli/install
      - checkout
      - attach_workspace:
          at: ~/embeddable-explorer
      - run:
          name: Upload build artifacts to CDN
          command: |
            gsutil -m rsync -r ~/embeddable-explorer/packages/sandbox/dist gs://embeddable-sandbox/$CIRCLE_SHA1

  cdn-upload-npm-versioned-sandbox:
    executor: node
    steps:
      - gcp-cli/install
      - checkout
      - attach_workspace:
          at: ~/embeddable-explorer
      - run: |
          cat bash.env
          cat bash.env >> $BASH_ENV
      - setup-sandbox-gcs-creds
      - run:
          name: Upload build artifacts to CDN
          command: |
            gsutil -m rsync -r ~/embeddable-explorer/packages/sandbox/dist gs://embeddable-sandbox/v$NPM_MAJOR_SANDBOX_VERSION

workflows:
  build-test-deploy:
    jobs:
      - eslint
      - prettier
      - typescript
      - set-env-vars
      - build-latest-umd-explorer
      - build-latest-umd-sandbox
      - bundlewatch:
          requires:
            - build-latest-umd-explorer
            - build-latest-umd-sandbox
      - cdn-upload-latest-explorer:
          context:
            - embeddable-explorer-write
          requires:
            - build-latest-umd-explorer
          filters:
            branches:
              only: main
      - build-github-versioned-umd-explorer:
          requires:
            - cdn-upload-latest-explorer
      - cdn-upload-github-versioned-explorer:
          context:
            - embeddable-explorer-write
          requires:
            - build-github-versioned-umd-explorer
      - build-npm-versioned-umd-explorer:
          requires:
            - set-env-vars
            - cdn-upload-github-versioned-explorer
      - cdn-upload-npm-versioned-explorer:
          context:
            - embeddable-explorer-write
          requires:
            - build-npm-versioned-umd-explorer
          filters:
            branches:
              only: main
      - cdn-upload-latest-sandbox:
          context:
            - embeddable-sandbox-write
          requires:
            - build-latest-umd-sandbox
          filters:
            branches:
              only: main
      - build-github-versioned-umd-sandbox:
          requires:
            - cdn-upload-latest-sandbox
      - cdn-upload-github-versioned-sandbox:
          context:
            - embeddable-sandbox-write
          requires:
            - build-github-versioned-umd-sandbox
          filters:
            branches:
              only: main
      - build-npm-versioned-umd-sandbox:
          requires:
            - set-env-vars
            - cdn-upload-github-versioned-sandbox
      - cdn-upload-npm-versioned-sandbox:
          context:
            - embeddable-sandbox-write
          requires:
            - build-npm-versioned-umd-sandbox
          filters:
            branches:
              only: main
  security-scans:
    jobs:
      - secops/gitleaks:
          context:
            - platform-docker-ro
            - github-orb
            - secops-oidc
          git-base-revision: <<#pipeline.git.base_revision>><<pipeline.git.base_revision>><</pipeline.git.base_revision >>
          git-revision: << pipeline.git.revision >>
